const User = require("../../../models/users/userModel");
const ReaderExpService = require("../../reader/services/readerExpService");
const AuthorExpService = require("../../author/services/authorExpService");

//X·ª≠ l√Ω logic login (Ki·ªÉm tra th√¥ng tin, t·∫°o token khi login success)
const loginUser = async (email, password) => {
  const emailUser = await User.findOne({ email });
  if (!emailUser) throw new Error("Email kh√¥ng ch√≠nh x√°c ho·∫∑c kh√¥ng t·ªìn t·∫°i!");

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) throw new Error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");

  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "7d" }); //T·∫°o token JWT
  return token;
};

// L·∫•y danh s√°ch User
const getUsers = async () => {
  return await User.find({});
};

// Th√™m User m·ªõi
const addUser = async (userData) => {
  try {
    const existingUser = await User.findOne({ email: userData.email });
    if (existingUser) {
      throw new Error("Email ƒë√£ t·ªìn t·∫°i");
    }
    const newUser = new User(userData);
    await newUser.save();

    await ReaderExpService.createReaderExp(newUser._id); //T·∫°o ReaderExp khi t·∫°o User m·ªõi

    return newUser;
  } catch (error) {
    throw error;
  }
};

// X√≥a User theo ID (x√≥a lu√¥n ReaderExp v√† AuthorExp n·∫øu c√≥)
const deleteUserById = async (id) => {
  try {
    const user = await User.findByIdAndDelete(id);
    if (user) {
      await ReaderExpService.deleteReaderExp(id); // X√≥a ReaderExp li√™n quan
      await AuthorExpService.deleteAuthorExp(id); // X√≥a AuthorExp li√™n quan
      console.log(`üóëÔ∏è User ${id} v√† d·ªØ li·ªáu li√™n quan ƒë√£ b·ªã x√≥a.`);
    }
    return user;
  } catch (error) {
    throw error;
  }
};

// C·∫≠p nh·∫≠t User theo ID
const updateUserById = async (id, updateData) => {
  const user = await User.findByIdAndUpdate(id, updateData, { new: true });

  if (!user) {
    throw new Error("User kh√¥ng t·ªìn t·∫°i");
  }

  // Ki·ªÉm tra n·∫øu user m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t c√≥ role l√† "author"
  if (user.role === "author") {
    await AuthorExpService.createAuthorExp(id);
    console.log("ƒê√£ ki·ªÉm tra v√† t·∫°o AuthorExp n·∫øu ch∆∞a c√≥!");
  }

  return user;
};

module.exports = {
  loginUser,
  getUsers,
  addUser,
  deleteUserById,
  updateUserById,
};
