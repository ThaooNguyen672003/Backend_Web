const AuthorExp = require("../../../models/authors/authorExpModel");
const AuthorTaskService = require("./authorTaskService");

// T·ª± ƒë·ªông t·∫°o khi c√≥ User c√≥ role l√† Author
const createAuthorExp = async (userId) => {
  const existingExp = await AuthorExp.findOne({ idUser: userId });
  if (!existingExp) {
    const authorExp = await AuthorExp.create({ idUser: userId });

    await AuthorTaskService.createAuthorTask(authorExp._id);
    console.log("AuthorExp v√† AuthorTask ƒë√£ ƒë∆∞·ª£c t·∫°o!");
  } else {
    console.log("AuthorExp ƒë√£ t·ªìn t·∫°i, kh√¥ng t·∫°o l·∫°i!");
  }
};

// X√≥a AuthorExp (k√®m theo AuthorTask)
const deleteAuthorExp = async (userId) => {
  try {
    const authorExp = await AuthorExp.findOne({ idUser: userId });
    if (authorExp) {
      await AuthorExp.deleteOne({ idUser: userId });
      console.log("üóëÔ∏è AuthorExp ƒë√£ b·ªã x√≥a!");

      // X√≥a nhi·ªám v·ª• c·ªßa t√°c gi·∫£ li√™n quan
      await AuthorTaskService.deleteAuthorTask(authorExp._id);
    }
  } catch (error) {
    throw new Error("üî• L·ªói khi x√≥a AuthorExp: " + error.message);
  }
};

// L·∫•y t·∫•t c·∫£ AuthorExp
const getAllAuthorExp = async () => {
  return await AuthorExp.find()
    .populate("idUser", "username email")
    .populate("idAuthorTask");
};

// L·∫•y th√¥ng tin Exp c·ªßa m·ªôt Author theo ID
const getAuthorExpById = async (id) => {
  return await AuthorExp.findById(id)
    .populate("idUser", "username email")
    .populate("idAuthorTask");
};

// C·ªông Exp t·ª± ƒë·ªông khi ho√†n th√†nh nhi·ªám v·ª•
const addExpForAuthor = async (idUser, idAuthorTask, expEarned) => {
  const authorExp = await AuthorExp.findOne({ idUser });

  if (authorExp) {
    authorExp.totalExp += expEarned;

    // C·∫≠p nh·∫≠t level n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán
    if (authorExp.totalExp >= 100) {
      authorExp.level += 1;
    }

    return await authorExp.save();
  } else {
    return await AuthorExp.create({ idUser, idAuthorTask, totalExp: expEarned, level: 1 });
  }
};

// Xu·∫•t t·∫•t c·∫£ c√°c h√†m
module.exports = {
  createAuthorExp,
  deleteAuthorExp,
  getAllAuthorExp,
  getAuthorExpById,
  addExpForAuthor,
};
